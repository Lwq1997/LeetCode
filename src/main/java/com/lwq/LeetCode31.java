package com.lwq;

import org.junit.Test;

import java.util.Arrays;

/**
 * 实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。
 *
 * 如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。
 *
 * 必须原地修改，只允许使用额外常数空间。
 *
 * 以下是一些例子，输入位于左侧列，其相应输出位于右侧列。
 * 1,2,3 → 1,3,2
 * 3,2,1 → 1,2,3
 * 1,1,5 → 1,5,1
 *
 * 人话：找出这个数组排序出的所有数中，刚好比当前数大的那个数
 */
public class LeetCode31 {
    /**
     * 其实就是从数组倒着查找，找到nums[i-1] 比nums[i]小的时候，
     * 就将nums[i-1]跟   nums[i]到nums[nums.length - 1]当中找到一个最小的比nums[i-1]大的元素交换。 其实就是排序一下nums[i]到nums[nums.length - 1]，然后交换即可
     * 交换后，再把nums[i]到nums[nums.length-1]排序（第二部已满足)，就ok了
     *
     * 我们希望下一个数比当前数大，这样才满足“下一个排列”的定义。因此只需要将后面的「大数」与前面的「小数」交换，就能得到一个更大的数。比如 123456，将 5 和 6 交换就能得到一个更大的数 123465。
     * 我们还希望下一个数增加的幅度尽可能的小，这样才满足“下一个排列与当前排列紧邻“的要求。为了满足这个要求，我们需要：
     *      在尽可能靠右的低位进行交换，需要从后向前查找
     *      将一个 尽可能小的「大数」 与前面的「小数」交换。比如 123465，下一个排列应该把 5 和 4 交换而不是把 6 和 4 交换
     *      将「大数」换到前面后，需要将「大数」后面的所有数重置为升序，升序排列就是最小的排列。以 123465 为例：首先按照上一步，交换 5 和 4，得到 123564；然后需要将 5 之后的数重置为升序，得到 123546。显然 123546 比 123564 更小，123546 就是 123465 的下一个排列
     *
     *
     * 1从后向前查找第一个相邻升序的元素对 (i,j)，满足 A[i] < A[j]。此时 [j,end) 必然是降序
     * 2在 [j,end) 从后向前查找第一个满足 A[i] < A[k] 的 k。A[i]、A[k] 分别就是上文所说的「小数」、「大数」
     * 3将 A[i] 与 A[k] 交换
     * 4可以断定这时 [j,end) 必然是降序，逆置 [j,end)，使其升序
     * 5如果在步骤 1 找不到符合的相邻元素对，说明当前 [begin,end) 为一个降序顺序，则直接跳到步骤 4
     *
     */
    @Test
    public void nextPermutation() {
        int[] nums = {2,3,1};
        // 2,3,1
        // 找到2,3。从3往后找到第一个大于2的数，也就是3,交换2，3
        // 3,2,1
        // 然后排序2，1
        // 3,1,2

        // 2,3,1
        // 2,1,3
        // 3,1,2
        int len = nums.length;
        for(int i = len-1; i > 0; i--){
            if (nums[i] > nums[i - 1]) {
                Arrays.sort(nums, i, len);
                for (int j = i; j <len; j++) {
                    if (nums[j] > nums[i - 1]) {
                        int temp = nums[j];
                        nums[j] = nums[i - 1];
                        nums[i - 1] = temp;
                        return;
                    }
                }
            }
        }
        Arrays.sort(nums);
    }
}
