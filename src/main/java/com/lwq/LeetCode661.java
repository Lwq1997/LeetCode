package com.lwq;

/**
 * 包含整数的二维矩阵 M 表示一个图片的灰度。你需要设计一个平滑器来让每一个单元的灰度成为平均灰度 (向下舍入) ，平均灰度的计算是周围的8个单元和它本身的值求平均，如果周围的单元格不足八个，则尽可能多的利用它们。
 * <p>
 * 示例 1:
 * <p>
 * 输入:
 * [[1,1,1],
 * [1,0,1],
 * [1,1,1]]
 * 输出:
 * [[0, 0, 0],
 * [0, 0, 0],
 * [0, 0, 0]]
 * 解释:
 * 对于点 (0,0), (0,2), (2,0), (2,2): 平均(3/4) = 平均(0.75) = 0
 * 对于点 (0,1), (1,0), (1,2), (2,1): 平均(5/6) = 平均(0.83333333) = 0
 * 对于点 (1,1): 平均(8/9) = 平均(0.88888889) = 0
 * 注意:
 * <p>
 * 给定矩阵中的整数范围为 [0, 255]。
 * 矩阵的长和宽的范围均为 [1, 150]。
 */
public class LeetCode661 {
    public static void main(String[] args) {

    }

    public int[][] imageSmoother(int[][] M) {
        int R = M.length, C = M[0].length;
        int[][] res = new int[R][C];
        for (int r = 0; r < R; r++) {
            for (int c = 0; c < C; c++) {
                int count = 0;
                for (int i = r-1; i <= r+1; ++i) {
                    for (int j = c - 1; j <= c + 1; ++j) {
                        if (0 <= i && i < R && 0 <= j && j < C) {
                            res[r][c] += M[i][j];
                            count++;
                        }
                    }
                }
                res[r][c] /= count;
            }
        }
        return res;
    }
}
