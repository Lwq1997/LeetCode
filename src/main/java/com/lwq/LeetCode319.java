package com.lwq;

/**
 * 初始时有 n 个灯泡关闭。 第 1 轮，你打开所有的灯泡。 第 2 轮，每两个灯泡你关闭一次。 第 3 轮，每三个灯泡切换一次开关（如果关闭则开启，如果开启则关闭）。第 i 轮，每 i 个灯泡切换一次开关。 对于第 n 轮，你只切换最后一个灯泡的开关。 找出 n 轮后有多少个亮着的灯泡。
 *
 * 示例:
 *
 * 输入: 3
 * 输出: 1
 * 解释:
 * 初始时, 灯泡状态 [关闭, 关闭, 关闭].
 * 第一轮后, 灯泡状态 [开启, 开启, 开启].
 * 第二轮后, 灯泡状态 [开启, 关闭, 开启].
 * 第三轮后, 灯泡状态 [开启, 关闭, 关闭].
 *
 * 你应该返回 1，因为只有一个灯泡还亮着。
 *
 *
 */
public class LeetCode319 {
    public static void main(String[] args) {
        int num = 12;
        int res = bulbSwitch(num);
        System.out.println(res);
    }


    /**
     *
     * 第18个灯泡会在1,2,3,6,9,18轮翻转。
     * 第36个灯泡会在1,2,3,4,6,9,12,18,36轮翻转。
     *
     * 如果一个灯泡有奇数个约数，那么最后这个灯泡一定会亮着。
     *
     * 有奇数个约数的数一定是完全平方数。这是因为，对于数n，如果m是它的约数，则n/m也是它的约数，若m≠n/m，则它的约数是以m、n/m的形式成对出现的。而m＝n/m成立且n/m是正整数时，n是完全平方数,而它有奇数个约数。
     *
     * 看图Leetcode301。最后亮着的是1，4，9，16
     * @param num
     * @return
     */
    public static int bulbSwitch(int num) {
        return (int)Math.sqrt(num);
    }
}



