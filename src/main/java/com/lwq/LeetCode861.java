package com.lwq;

/**
 * 有一个二维矩阵 A 其中每个元素的值为 0 或 1 。
 *
 * 移动是指选择任一行或列，并转换该行或列中的每一个值：将所有 0 都更改为 1，将所有 1 都更改为 0。
 *
 * 在做出任意次数的移动后，将该矩阵的每一行都按照二进制数来解释，矩阵的得分就是这些数字的总和。
 *
 * 返回尽可能高的分数。
 *
 *  
 *
 * 示例：
 *
 * 输入：[[0,0,1,1],[1,0,1,0],[1,1,0,0]]
 * 输出：39
 * 解释：
 * 转换为 [[1,1,1,1],[1,0,0,1],[1,1,1,1]]
 * 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39
 *  
 *
 * 提示：
 *
 * 1 <= A.length <= 20
 * 1 <= A[0].length <= 20
 * A[i][j] 是 0 或 1
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/score-after-flipping-matrix
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class LeetCode861 {
    /**
     * 第一步：将首列全部置位1，保证最高位全部取到，首列不为1的行全部翻转.总贡献为 m * 2^{n-1}
     * 这一步只能进行行翻转
     * 第一列全为 1的结果一定大于其它任何结果的。所以我们先把最高位为 0 的行翻转，并且那些最高位为 1 的是不能行翻转的。对于样例 1，进行如下的变换：
     * 0011
     * 1010
     * 1100
     *
     * 变为
     *
     * 1100
     * 1010
     * 1100
     *
     *
     * 第二步：从第二列开始，将所有列中1的数量小于0的数量的行翻转，保证取1的数量尽可能多,该列的总贡献为 k *2^{n-j-1}
     * 我们再去考虑列翻转。对于每列，我们肯定希望 1 越多越好，因为每个 1 都会让那行的数字更大。那么统计每列中 0 和 1 的个数，如果 0 多就列翻转，否则不列翻转。对于样例 1，变换继续：
     *
     *
     * 1100
     * 1010
     * 1100
     *
     * 变为
     *
     * 1111
     * 1001
     * 1111
     *
     * （第三列第四列操作了列翻转）
     *
     * 第三步：计算结果返回
     *
     */
    public int matrixScore(int[][] A) {
        int m = A.length;
        int n  =A[0].length;
        int res = m * (1 << (n - 1));
        for(int j = 1; j < n ; j++){
            // 从第二列开始
            int nOnes = 0;
            for(int i = 0 ;i < m ; i++){
                if(A[i][0] == 1){
                    // 如果第一列是1，这统计的时候这一列不能再反转，是什么就是什么
                    nOnes += A[i][j];
                }else {
                    // 如果不是1，就先翻转后统计下
                    // 如果这一行进行了行反转，则该元素的实际取值为 1 - A[i][j]
                    nOnes += (1 - A[i][j]);
                }
            }
            // 统计出这一列中1的个数
            int k = Math.max(nOnes, m - nOnes);
            res += k * (1 << (n - j - 1));
        }
        return res;
    }

    public int matrixScore1(int[][] A) {
        int m = A.length, n = A[0].length;
        int result = 0;
        for (int i = 0; i < m; i++) {
            // 如果第 i 行以 0 开头
            if (A[i][0] == 0) {
                // 行翻转
                for (int j = 0; j < n; j++) {
                    A[i][j] ^= 1;
                }
            }
        }
        for (int j = 0; j < n; j++) {
            int cnt = 0;
            // 统计第 j 列有多少个 1。
            for (int i = 0; i < m; i++) {
                cnt += A[i][j];
            }
            // max(cnt, m - cnt) 表示这个位置最多有多少个 1。 1<<(n-j-1) 表示这个位置的1的大小。
            result += Math.max(cnt, m - cnt) * (1 << (n - j - 1));
        }
        return result;
    }
}